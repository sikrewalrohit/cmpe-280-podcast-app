{"ast":null,"code":"/**\n * Srcset Parser\n *\n * By Alex Bell |  MIT License\n *\n * JS Parser for the string value that appears in markup <img srcset=\"here\">\n *\n * @returns Array [{url: _, d: _, w: _, h:_}, ...]\n *\n * Based super duper closely on the reference algorithm at:\n * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute\n *\n * Most comments are copied in directly from the spec\n * (except for comments in parens).\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.parseSrcset = factory();\n  }\n})(this, function () {\n  // 1. Let input be the value passed to this algorithm.\n  return function (input) {\n    // UTILITY FUNCTIONS\n    // Manual is faster than RegEx\n    // http://bjorn.tipling.com/state-and-regular-expressions-in-javascript\n    // http://jsperf.com/whitespace-character/5\n    function isSpace(c) {\n      return c === \"\\u0020\" || // space\n      c === \"\\u0009\" || // horizontal tab\n      c === \"\\u000A\" || // new line\n      c === \"\\u000C\" || // form feed\n      c === \"\\u000D\"; // carriage return\n    }\n\n    function collectCharacters(regEx) {\n      var chars,\n          match = regEx.exec(input.substring(pos));\n\n      if (match) {\n        chars = match[0];\n        pos += chars.length;\n        return chars;\n      }\n    }\n\n    var inputLength = input.length,\n        // (Don't use \\s, to avoid matching non-breaking space)\n    regexLeadingSpaces = /^[ \\t\\n\\r\\u000c]+/,\n        regexLeadingCommasOrSpaces = /^[, \\t\\n\\r\\u000c]+/,\n        regexLeadingNotSpaces = /^[^ \\t\\n\\r\\u000c]+/,\n        regexTrailingCommas = /[,]+$/,\n        regexNonNegativeInteger = /^\\d+$/,\n        // ( Positive or negative or unsigned integers or decimals, without or without exponents.\n    // Must include at least one digit.\n    // According to spec tests any decimal point must be followed by a digit.\n    // No leading plus sign is allowed.)\n    // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number\n    regexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/,\n        url,\n        descriptors,\n        currentDescriptor,\n        state,\n        c,\n        // 2. Let position be a pointer into input, initially pointing at the start\n    //    of the string.\n    pos = 0,\n        // 3. Let candidates be an initially empty source set.\n    candidates = []; // 4. Splitting loop: Collect a sequence of characters that are space\n    //    characters or U+002C COMMA characters. If any U+002C COMMA characters\n    //    were collected, that is a parse error.\n\n    while (true) {\n      collectCharacters(regexLeadingCommasOrSpaces); // 5. If position is past the end of input, return candidates and abort these steps.\n\n      if (pos >= inputLength) {\n        return candidates; // (we're done, this is the sole return path)\n      } // 6. Collect a sequence of characters that are not space characters,\n      //    and let that be url.\n\n\n      url = collectCharacters(regexLeadingNotSpaces); // 7. Let descriptors be a new empty list.\n\n      descriptors = []; // 8. If url ends with a U+002C COMMA character (,), follow these substeps:\n      //\t\t(1). Remove all trailing U+002C COMMA characters from url. If this removed\n      //         more than one character, that is a parse error.\n\n      if (url.slice(-1) === \",\") {\n        url = url.replace(regexTrailingCommas, \"\"); // (Jump ahead to step 9 to skip tokenization and just push the candidate).\n\n        parseDescriptors(); //\tOtherwise, follow these substeps:\n      } else {\n        tokenize();\n      } // (close else of step 8)\n      // 16. Return to the step labeled splitting loop.\n\n    } // (Close of big while loop.)\n\n    /**\n     * Tokenizes descriptor properties prior to parsing\n     * Returns undefined.\n     */\n\n\n    function tokenize() {\n      // 8.1. Descriptor tokeniser: Skip whitespace\n      collectCharacters(regexLeadingSpaces); // 8.2. Let current descriptor be the empty string.\n\n      currentDescriptor = \"\"; // 8.3. Let state be in descriptor.\n\n      state = \"in descriptor\";\n\n      while (true) {\n        // 8.4. Let c be the character at position.\n        c = input.charAt(pos); //  Do the following depending on the value of state.\n        //  For the purpose of this step, \"EOF\" is a special character representing\n        //  that position is past the end of input.\n        // In descriptor\n\n        if (state === \"in descriptor\") {\n          // Do the following, depending on the value of c:\n          // Space character\n          // If current descriptor is not empty, append current descriptor to\n          // descriptors and let current descriptor be the empty string.\n          // Set state to after descriptor.\n          if (isSpace(c)) {\n            if (currentDescriptor) {\n              descriptors.push(currentDescriptor);\n              currentDescriptor = \"\";\n              state = \"after descriptor\";\n            } // U+002C COMMA (,)\n            // Advance position to the next character in input. If current descriptor\n            // is not empty, append current descriptor to descriptors. Jump to the step\n            // labeled descriptor parser.\n\n          } else if (c === \",\") {\n            pos += 1;\n\n            if (currentDescriptor) {\n              descriptors.push(currentDescriptor);\n            }\n\n            parseDescriptors();\n            return; // U+0028 LEFT PARENTHESIS (()\n            // Append c to current descriptor. Set state to in parens.\n          } else if (c === \"\\u0028\") {\n            currentDescriptor = currentDescriptor + c;\n            state = \"in parens\"; // EOF\n            // If current descriptor is not empty, append current descriptor to\n            // descriptors. Jump to the step labeled descriptor parser.\n          } else if (c === \"\") {\n            if (currentDescriptor) {\n              descriptors.push(currentDescriptor);\n            }\n\n            parseDescriptors();\n            return; // Anything else\n            // Append c to current descriptor.\n          } else {\n            currentDescriptor = currentDescriptor + c;\n          } // (end \"in descriptor\"\n          // In parens\n\n        } else if (state === \"in parens\") {\n          // U+0029 RIGHT PARENTHESIS ())\n          // Append c to current descriptor. Set state to in descriptor.\n          if (c === \")\") {\n            currentDescriptor = currentDescriptor + c;\n            state = \"in descriptor\"; // EOF\n            // Append current descriptor to descriptors. Jump to the step labeled\n            // descriptor parser.\n          } else if (c === \"\") {\n            descriptors.push(currentDescriptor);\n            parseDescriptors();\n            return; // Anything else\n            // Append c to current descriptor.\n          } else {\n            currentDescriptor = currentDescriptor + c;\n          } // After descriptor\n\n        } else if (state === \"after descriptor\") {\n          // Do the following, depending on the value of c:\n          // Space character: Stay in this state.\n          if (isSpace(c)) {// EOF: Jump to the step labeled descriptor parser.\n          } else if (c === \"\") {\n            parseDescriptors();\n            return; // Anything else\n            // Set state to in descriptor. Set position to the previous character in input.\n          } else {\n            state = \"in descriptor\";\n            pos -= 1;\n          }\n        } // Advance position to the next character in input.\n\n\n        pos += 1; // Repeat this step.\n      } // (close while true loop)\n\n    }\n    /**\n     * Adds descriptor properties to a candidate, pushes to the candidates array\n     * @return undefined\n     */\n    // Declared outside of the while loop so that it's only created once.\n\n\n    function parseDescriptors() {\n      // 9. Descriptor parser: Let error be no.\n      var pError = false,\n          // 10. Let width be absent.\n      // 11. Let density be absent.\n      // 12. Let future-compat-h be absent. (We're implementing it now as h)\n      w,\n          d,\n          h,\n          i,\n          candidate = {},\n          desc,\n          lastChar,\n          value,\n          intVal,\n          floatVal; // 13. For each descriptor in descriptors, run the appropriate set of steps\n      // from the following list:\n\n      for (i = 0; i < descriptors.length; i++) {\n        desc = descriptors[i];\n        lastChar = desc[desc.length - 1];\n        value = desc.substring(0, desc.length - 1);\n        intVal = parseInt(value, 10);\n        floatVal = parseFloat(value); // If the descriptor consists of a valid non-negative integer followed by\n        // a U+0077 LATIN SMALL LETTER W character\n\n        if (regexNonNegativeInteger.test(value) && lastChar === \"w\") {\n          // If width and density are not both absent, then let error be yes.\n          if (w || d) {\n            pError = true;\n          } // Apply the rules for parsing non-negative integers to the descriptor.\n          // If the result is zero, let error be yes.\n          // Otherwise, let width be the result.\n\n\n          if (intVal === 0) {\n            pError = true;\n          } else {\n            w = intVal;\n          } // If the descriptor consists of a valid floating-point number followed by\n          // a U+0078 LATIN SMALL LETTER X character\n\n        } else if (regexFloatingPoint.test(value) && lastChar === \"x\") {\n          // If width, density and future-compat-h are not all absent, then let error\n          // be yes.\n          if (w || d || h) {\n            pError = true;\n          } // Apply the rules for parsing floating-point number values to the descriptor.\n          // If the result is less than zero, let error be yes. Otherwise, let density\n          // be the result.\n\n\n          if (floatVal < 0) {\n            pError = true;\n          } else {\n            d = floatVal;\n          } // If the descriptor consists of a valid non-negative integer followed by\n          // a U+0068 LATIN SMALL LETTER H character\n\n        } else if (regexNonNegativeInteger.test(value) && lastChar === \"h\") {\n          // If height and density are not both absent, then let error be yes.\n          if (h || d) {\n            pError = true;\n          } // Apply the rules for parsing non-negative integers to the descriptor.\n          // If the result is zero, let error be yes. Otherwise, let future-compat-h\n          // be the result.\n\n\n          if (intVal === 0) {\n            pError = true;\n          } else {\n            h = intVal;\n          } // Anything else, Let error be yes.\n\n        } else {\n          pError = true;\n        }\n      } // (close step 13 for loop)\n      // 15. If error is still no, then append a new image source to candidates whose\n      // URL is url, associated with a width width if not absent and a pixel\n      // density density if not absent. Otherwise, there is a parse error.\n\n\n      if (!pError) {\n        candidate.url = url;\n\n        if (w) {\n          candidate.w = w;\n        }\n\n        if (d) {\n          candidate.d = d;\n        }\n\n        if (h) {\n          candidate.h = h;\n        }\n\n        candidates.push(candidate);\n      } else if (console && console.log) {\n        console.log(\"Invalid srcset descriptor found in '\" + input + \"' at '\" + desc + \"'.\");\n      }\n    } // (close parseDescriptors fn)\n\n  };\n});","map":{"version":3,"names":["root","factory","define","amd","module","exports","parseSrcset","input","isSpace","c","collectCharacters","regEx","chars","match","exec","substring","pos","length","inputLength","regexLeadingSpaces","regexLeadingCommasOrSpaces","regexLeadingNotSpaces","regexTrailingCommas","regexNonNegativeInteger","regexFloatingPoint","url","descriptors","currentDescriptor","state","candidates","slice","replace","parseDescriptors","tokenize","charAt","push","pError","w","d","h","i","candidate","desc","lastChar","value","intVal","floatVal","parseInt","parseFloat","test","console","log"],"sources":["/Users/rohitsikrewal/Desktop/cmpe-280-podcast/node_modules/parse-srcset/src/parse-srcset.js"],"sourcesContent":["/**\n * Srcset Parser\n *\n * By Alex Bell |  MIT License\n *\n * JS Parser for the string value that appears in markup <img srcset=\"here\">\n *\n * @returns Array [{url: _, d: _, w: _, h:_}, ...]\n *\n * Based super duper closely on the reference algorithm at:\n * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute\n *\n * Most comments are copied in directly from the spec\n * (except for comments in parens).\n */\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof module === 'object' && module.exports) {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.parseSrcset = factory();\n\t}\n}(this, function () {\n\n\t// 1. Let input be the value passed to this algorithm.\n\treturn function (input) {\n\n\t\t// UTILITY FUNCTIONS\n\n\t\t// Manual is faster than RegEx\n\t\t// http://bjorn.tipling.com/state-and-regular-expressions-in-javascript\n\t\t// http://jsperf.com/whitespace-character/5\n\t\tfunction isSpace(c) {\n\t\t\treturn (c === \"\\u0020\" || // space\n\t\t\tc === \"\\u0009\" || // horizontal tab\n\t\t\tc === \"\\u000A\" || // new line\n\t\t\tc === \"\\u000C\" || // form feed\n\t\t\tc === \"\\u000D\");  // carriage return\n\t\t}\n\n\t\tfunction collectCharacters(regEx) {\n\t\t\tvar chars,\n\t\t\t\tmatch = regEx.exec(input.substring(pos));\n\t\t\tif (match) {\n\t\t\t\tchars = match[ 0 ];\n\t\t\t\tpos += chars.length;\n\t\t\t\treturn chars;\n\t\t\t}\n\t\t}\n\n\t\tvar inputLength = input.length,\n\n\t\t\t// (Don't use \\s, to avoid matching non-breaking space)\n\t\t\tregexLeadingSpaces = /^[ \\t\\n\\r\\u000c]+/,\n\t\t\tregexLeadingCommasOrSpaces = /^[, \\t\\n\\r\\u000c]+/,\n\t\t\tregexLeadingNotSpaces = /^[^ \\t\\n\\r\\u000c]+/,\n\t\t\tregexTrailingCommas = /[,]+$/,\n\t\t\tregexNonNegativeInteger = /^\\d+$/,\n\n\t\t\t// ( Positive or negative or unsigned integers or decimals, without or without exponents.\n\t\t\t// Must include at least one digit.\n\t\t\t// According to spec tests any decimal point must be followed by a digit.\n\t\t\t// No leading plus sign is allowed.)\n\t\t\t// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number\n\t\t\tregexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/,\n\n\t\t\turl,\n\t\t\tdescriptors,\n\t\t\tcurrentDescriptor,\n\t\t\tstate,\n\t\t\tc,\n\n\t\t\t// 2. Let position be a pointer into input, initially pointing at the start\n\t\t\t//    of the string.\n\t\t\tpos = 0,\n\n\t\t\t// 3. Let candidates be an initially empty source set.\n\t\t\tcandidates = [];\n\n\t\t// 4. Splitting loop: Collect a sequence of characters that are space\n\t\t//    characters or U+002C COMMA characters. If any U+002C COMMA characters\n\t\t//    were collected, that is a parse error.\n\t\twhile (true) {\n\t\t\tcollectCharacters(regexLeadingCommasOrSpaces);\n\n\t\t\t// 5. If position is past the end of input, return candidates and abort these steps.\n\t\t\tif (pos >= inputLength) {\n\t\t\t\treturn candidates; // (we're done, this is the sole return path)\n\t\t\t}\n\n\t\t\t// 6. Collect a sequence of characters that are not space characters,\n\t\t\t//    and let that be url.\n\t\t\turl = collectCharacters(regexLeadingNotSpaces);\n\n\t\t\t// 7. Let descriptors be a new empty list.\n\t\t\tdescriptors = [];\n\n\t\t\t// 8. If url ends with a U+002C COMMA character (,), follow these substeps:\n\t\t\t//\t\t(1). Remove all trailing U+002C COMMA characters from url. If this removed\n\t\t\t//         more than one character, that is a parse error.\n\t\t\tif (url.slice(-1) === \",\") {\n\t\t\t\turl = url.replace(regexTrailingCommas, \"\");\n\t\t\t\t// (Jump ahead to step 9 to skip tokenization and just push the candidate).\n\t\t\t\tparseDescriptors();\n\n\t\t\t\t//\tOtherwise, follow these substeps:\n\t\t\t} else {\n\t\t\t\ttokenize();\n\t\t\t} // (close else of step 8)\n\n\t\t\t// 16. Return to the step labeled splitting loop.\n\t\t} // (Close of big while loop.)\n\n\t\t/**\n\t\t * Tokenizes descriptor properties prior to parsing\n\t\t * Returns undefined.\n\t\t */\n\t\tfunction tokenize() {\n\n\t\t\t// 8.1. Descriptor tokeniser: Skip whitespace\n\t\t\tcollectCharacters(regexLeadingSpaces);\n\n\t\t\t// 8.2. Let current descriptor be the empty string.\n\t\t\tcurrentDescriptor = \"\";\n\n\t\t\t// 8.3. Let state be in descriptor.\n\t\t\tstate = \"in descriptor\";\n\n\t\t\twhile (true) {\n\n\t\t\t\t// 8.4. Let c be the character at position.\n\t\t\t\tc = input.charAt(pos);\n\n\t\t\t\t//  Do the following depending on the value of state.\n\t\t\t\t//  For the purpose of this step, \"EOF\" is a special character representing\n\t\t\t\t//  that position is past the end of input.\n\n\t\t\t\t// In descriptor\n\t\t\t\tif (state === \"in descriptor\") {\n\t\t\t\t\t// Do the following, depending on the value of c:\n\n\t\t\t\t\t// Space character\n\t\t\t\t\t// If current descriptor is not empty, append current descriptor to\n\t\t\t\t\t// descriptors and let current descriptor be the empty string.\n\t\t\t\t\t// Set state to after descriptor.\n\t\t\t\t\tif (isSpace(c)) {\n\t\t\t\t\t\tif (currentDescriptor) {\n\t\t\t\t\t\t\tdescriptors.push(currentDescriptor);\n\t\t\t\t\t\t\tcurrentDescriptor = \"\";\n\t\t\t\t\t\t\tstate = \"after descriptor\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// U+002C COMMA (,)\n\t\t\t\t\t\t// Advance position to the next character in input. If current descriptor\n\t\t\t\t\t\t// is not empty, append current descriptor to descriptors. Jump to the step\n\t\t\t\t\t\t// labeled descriptor parser.\n\t\t\t\t\t} else if (c === \",\") {\n\t\t\t\t\t\tpos += 1;\n\t\t\t\t\t\tif (currentDescriptor) {\n\t\t\t\t\t\t\tdescriptors.push(currentDescriptor);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparseDescriptors();\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t// U+0028 LEFT PARENTHESIS (()\n\t\t\t\t\t\t// Append c to current descriptor. Set state to in parens.\n\t\t\t\t\t} else if (c === \"\\u0028\") {\n\t\t\t\t\t\tcurrentDescriptor = currentDescriptor + c;\n\t\t\t\t\t\tstate = \"in parens\";\n\n\t\t\t\t\t\t// EOF\n\t\t\t\t\t\t// If current descriptor is not empty, append current descriptor to\n\t\t\t\t\t\t// descriptors. Jump to the step labeled descriptor parser.\n\t\t\t\t\t} else if (c === \"\") {\n\t\t\t\t\t\tif (currentDescriptor) {\n\t\t\t\t\t\t\tdescriptors.push(currentDescriptor);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparseDescriptors();\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t// Anything else\n\t\t\t\t\t\t// Append c to current descriptor.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentDescriptor = currentDescriptor + c;\n\t\t\t\t\t}\n\t\t\t\t\t// (end \"in descriptor\"\n\n\t\t\t\t\t// In parens\n\t\t\t\t} else if (state === \"in parens\") {\n\n\t\t\t\t\t// U+0029 RIGHT PARENTHESIS ())\n\t\t\t\t\t// Append c to current descriptor. Set state to in descriptor.\n\t\t\t\t\tif (c === \")\") {\n\t\t\t\t\t\tcurrentDescriptor = currentDescriptor + c;\n\t\t\t\t\t\tstate = \"in descriptor\";\n\n\t\t\t\t\t\t// EOF\n\t\t\t\t\t\t// Append current descriptor to descriptors. Jump to the step labeled\n\t\t\t\t\t\t// descriptor parser.\n\t\t\t\t\t} else if (c === \"\") {\n\t\t\t\t\t\tdescriptors.push(currentDescriptor);\n\t\t\t\t\t\tparseDescriptors();\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t// Anything else\n\t\t\t\t\t\t// Append c to current descriptor.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentDescriptor = currentDescriptor + c;\n\t\t\t\t\t}\n\n\t\t\t\t\t// After descriptor\n\t\t\t\t} else if (state === \"after descriptor\") {\n\n\t\t\t\t\t// Do the following, depending on the value of c:\n\t\t\t\t\t// Space character: Stay in this state.\n\t\t\t\t\tif (isSpace(c)) {\n\n\t\t\t\t\t\t// EOF: Jump to the step labeled descriptor parser.\n\t\t\t\t\t} else if (c === \"\") {\n\t\t\t\t\t\tparseDescriptors();\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t// Anything else\n\t\t\t\t\t\t// Set state to in descriptor. Set position to the previous character in input.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate = \"in descriptor\";\n\t\t\t\t\t\tpos -= 1;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Advance position to the next character in input.\n\t\t\t\tpos += 1;\n\n\t\t\t\t// Repeat this step.\n\t\t\t} // (close while true loop)\n\t\t}\n\n\t\t/**\n\t\t * Adds descriptor properties to a candidate, pushes to the candidates array\n\t\t * @return undefined\n\t\t */\n\t\t// Declared outside of the while loop so that it's only created once.\n\t\tfunction parseDescriptors() {\n\n\t\t\t// 9. Descriptor parser: Let error be no.\n\t\t\tvar pError = false,\n\n\t\t\t\t// 10. Let width be absent.\n\t\t\t\t// 11. Let density be absent.\n\t\t\t\t// 12. Let future-compat-h be absent. (We're implementing it now as h)\n\t\t\t\tw, d, h, i,\n\t\t\t\tcandidate = {},\n\t\t\t\tdesc, lastChar, value, intVal, floatVal;\n\n\t\t\t// 13. For each descriptor in descriptors, run the appropriate set of steps\n\t\t\t// from the following list:\n\t\t\tfor (i = 0 ; i < descriptors.length; i++) {\n\t\t\t\tdesc = descriptors[ i ];\n\n\t\t\t\tlastChar = desc[ desc.length - 1 ];\n\t\t\t\tvalue = desc.substring(0, desc.length - 1);\n\t\t\t\tintVal = parseInt(value, 10);\n\t\t\t\tfloatVal = parseFloat(value);\n\n\t\t\t\t// If the descriptor consists of a valid non-negative integer followed by\n\t\t\t\t// a U+0077 LATIN SMALL LETTER W character\n\t\t\t\tif (regexNonNegativeInteger.test(value) && (lastChar === \"w\")) {\n\n\t\t\t\t\t// If width and density are not both absent, then let error be yes.\n\t\t\t\t\tif (w || d) {pError = true;}\n\n\t\t\t\t\t// Apply the rules for parsing non-negative integers to the descriptor.\n\t\t\t\t\t// If the result is zero, let error be yes.\n\t\t\t\t\t// Otherwise, let width be the result.\n\t\t\t\t\tif (intVal === 0) {pError = true;} else {w = intVal;}\n\n\t\t\t\t\t// If the descriptor consists of a valid floating-point number followed by\n\t\t\t\t\t// a U+0078 LATIN SMALL LETTER X character\n\t\t\t\t} else if (regexFloatingPoint.test(value) && (lastChar === \"x\")) {\n\n\t\t\t\t\t// If width, density and future-compat-h are not all absent, then let error\n\t\t\t\t\t// be yes.\n\t\t\t\t\tif (w || d || h) {pError = true;}\n\n\t\t\t\t\t// Apply the rules for parsing floating-point number values to the descriptor.\n\t\t\t\t\t// If the result is less than zero, let error be yes. Otherwise, let density\n\t\t\t\t\t// be the result.\n\t\t\t\t\tif (floatVal < 0) {pError = true;} else {d = floatVal;}\n\n\t\t\t\t\t// If the descriptor consists of a valid non-negative integer followed by\n\t\t\t\t\t// a U+0068 LATIN SMALL LETTER H character\n\t\t\t\t} else if (regexNonNegativeInteger.test(value) && (lastChar === \"h\")) {\n\n\t\t\t\t\t// If height and density are not both absent, then let error be yes.\n\t\t\t\t\tif (h || d) {pError = true;}\n\n\t\t\t\t\t// Apply the rules for parsing non-negative integers to the descriptor.\n\t\t\t\t\t// If the result is zero, let error be yes. Otherwise, let future-compat-h\n\t\t\t\t\t// be the result.\n\t\t\t\t\tif (intVal === 0) {pError = true;} else {h = intVal;}\n\n\t\t\t\t\t// Anything else, Let error be yes.\n\t\t\t\t} else {pError = true;}\n\t\t\t} // (close step 13 for loop)\n\n\t\t\t// 15. If error is still no, then append a new image source to candidates whose\n\t\t\t// URL is url, associated with a width width if not absent and a pixel\n\t\t\t// density density if not absent. Otherwise, there is a parse error.\n\t\t\tif (!pError) {\n\t\t\t\tcandidate.url = url;\n\t\t\t\tif (w) { candidate.w = w;}\n\t\t\t\tif (d) { candidate.d = d;}\n\t\t\t\tif (h) { candidate.h = h;}\n\t\t\t\tcandidates.push(candidate);\n\t\t\t} else if (console && console.log) {\n\t\t\t\tconsole.log(\"Invalid srcset descriptor found in '\" +\n\t\t\t\t\tinput + \"' at '\" + desc + \"'.\");\n\t\t\t}\n\t\t} // (close parseDescriptors fn)\n\n\t}\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}