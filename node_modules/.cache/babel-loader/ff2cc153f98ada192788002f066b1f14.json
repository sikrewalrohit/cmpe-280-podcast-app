{"ast":null,"code":"var _jsxFileName = \"/Users/rohitsikrewal/Desktop/cmpe-280-podcast-app/src/components/Player/Player.js\";\nimport React, { Component } from \"react\";\nimport PlayerControls from \"@/components/Player/PlayerControls\";\nimport NowPlayingContext from \"@/store/nowPlayingContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SKIP_TIME = 30;\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlayPauseClicked = () => {\n      if (this.audioElement.current.paused) {\n        this.audioElement.current.play().catch(e => {\n          console.error(e.message);\n        });\n      } else {\n        if (!Number.isNaN(this.state.duration)) {\n          this.audioElement.current.pause();\n        }\n      }\n    };\n\n    this.handleReplay = () => {\n      // If near the start of the file, set the current time to zero\n      // (prevents currentTime being set to a negative number).\n      if (this.state.currentTime - SKIP_TIME <= 0) {\n        this.audioElement.current.currentTime = 0;\n      } else {\n        this.audioElement.current.currentTime -= SKIP_TIME;\n      }\n    };\n\n    this.handleForward = () => {\n      // If near the end of the file, set the current time to the total duration\n      // (prevents currentTime being set to a number greater than the duration).\n      if (this.state.currentTime + SKIP_TIME >= this.state.duration) {\n        this.audioElement.current.currentTime = this.state.duration;\n      } else {\n        this.audioElement.current.currentTime += SKIP_TIME;\n      }\n    };\n\n    this.handleMetadataLoaded = e => {\n      this.audioElement.current.currentTime = this.context.progress;\n    };\n\n    this.handleTimeUpdate = e => {\n      this.setState({\n        currentTime: e.target.currentTime,\n        duration: this.audioElement.current.duration\n      });\n    };\n\n    this.handleSliderChange = (e, value) => {\n      // Convert the slider's new value property from a % to a time.\n      this.audioElement.current.currentTime = this.state.duration * value * 0.01;\n      this.setState({\n        currentTime: this.audioElement.current.currentTime\n      });\n    };\n\n    this.savePlaybackProgress = e => {\n      this.context.saveProgress(this.state.currentTime);\n    };\n\n    this.state = {\n      currentTime: 0,\n      duration: 0\n    }; // Will allow the component to access properties of the HTML <audio> element.\n\n    this.audioElement = new React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.savePlaybackProgress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.savePlaybackProgress);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PlayerControls, {\n        currentTime: this.state.currentTime,\n        duration: this.state.duration,\n        isPaused: this.audioElement.current ? this.audioElement.current.paused : true,\n        onReplay: this.handleReplay,\n        onForward: this.handleForward,\n        onPlayPauseClicked: this.handlePlayPauseClicked,\n        onSliderChange: this.handleSliderChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        preload: \"metadata\",\n        autoPlay: this.context.autoplay,\n        src: this.context.src || \"\",\n        onLoadedMetadata: this.handleMetadataLoaded,\n        onTimeUpdate: this.handleTimeUpdate,\n        ref: this.audioElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPlayer.contextType = NowPlayingContext;\nexport default Player;","map":{"version":3,"names":["React","Component","PlayerControls","NowPlayingContext","SKIP_TIME","Player","constructor","props","handlePlayPauseClicked","audioElement","current","paused","play","catch","e","console","error","message","Number","isNaN","state","duration","pause","handleReplay","currentTime","handleForward","handleMetadataLoaded","context","progress","handleTimeUpdate","setState","target","handleSliderChange","value","savePlaybackProgress","saveProgress","createRef","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","autoplay","src","contextType"],"sources":["/Users/rohitsikrewal/Desktop/cmpe-280-podcast-app/src/components/Player/Player.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PlayerControls from \"@/components/Player/PlayerControls\";\nimport NowPlayingContext from \"@/store/nowPlayingContext\";\n\nconst SKIP_TIME = 30;\n\nclass Player extends Component {\n  static contextType = NowPlayingContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentTime: 0,\n      duration: 0,\n    };\n\n    // Will allow the component to access properties of the HTML <audio> element.\n    this.audioElement = new React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.savePlaybackProgress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.savePlaybackProgress);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <PlayerControls\n          currentTime={this.state.currentTime}\n          duration={this.state.duration}\n          isPaused={this.audioElement.current ? this.audioElement.current.paused : true}\n          onReplay={this.handleReplay}\n          onForward={this.handleForward}\n          onPlayPauseClicked={this.handlePlayPauseClicked}\n          onSliderChange={this.handleSliderChange}\n        />\n        <audio\n          preload=\"metadata\"\n          autoPlay={this.context.autoplay}\n          src={this.context.src || \"\"}\n          onLoadedMetadata={this.handleMetadataLoaded}\n          onTimeUpdate={this.handleTimeUpdate}\n          ref={this.audioElement}\n        ></audio>\n      </React.Fragment>\n    );\n  }\n\n  handlePlayPauseClicked = () => {\n    if (this.audioElement.current.paused) {\n      this.audioElement.current.play().catch((e) => {\n        console.error(e.message);\n      });\n    } else {\n      if (!Number.isNaN(this.state.duration)) {\n        this.audioElement.current.pause();\n      }\n    }\n  };\n\n  handleReplay = () => {\n    // If near the start of the file, set the current time to zero\n    // (prevents currentTime being set to a negative number).\n    if (this.state.currentTime - SKIP_TIME <= 0) {\n      this.audioElement.current.currentTime = 0;\n    } else {\n      this.audioElement.current.currentTime -= SKIP_TIME;\n    }\n  };\n\n  handleForward = () => {\n    // If near the end of the file, set the current time to the total duration\n    // (prevents currentTime being set to a number greater than the duration).\n    if (this.state.currentTime + SKIP_TIME >= this.state.duration) {\n      this.audioElement.current.currentTime = this.state.duration;\n    } else {\n      this.audioElement.current.currentTime += SKIP_TIME;\n    }\n  };\n\n  handleMetadataLoaded = (e) => {\n    this.audioElement.current.currentTime = this.context.progress;\n  };\n\n  handleTimeUpdate = (e) => {\n    this.setState({\n      currentTime: e.target.currentTime,\n      duration: this.audioElement.current.duration,\n    });\n  };\n\n  // Syncs the slider with the current playback position.\n  handleSliderChange = (e, value) => {\n    // Convert the slider's new value property from a % to a time.\n    this.audioElement.current.currentTime = this.state.duration * value * 0.01;\n\n    this.setState({\n      currentTime: this.audioElement.current.currentTime,\n    });\n  };\n\n  savePlaybackProgress = (e) => {\n    this.context.saveProgress(this.state.currentTime);\n  };\n}\n\nexport default Player;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}